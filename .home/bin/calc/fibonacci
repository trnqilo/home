#!/usr/bin/env bash
set -e

if [[ "$strat" == 'proc_rec' ]]; then

  (( $1 > 1 )) \
    && echo $(( `fibonacci $(($1-1))`+`fibonacci $(($1-2))` )) \
    || echo $1

elif [[ "$strat" == 'proc_pipe' ]]; then

  if [[ "$1" ]]; then echo "$1" | fibonacci
  else n=`cat`
    (( n > 1 )) \
      && echo $(( `echo $((n-1)) | fibonacci`+`echo $((n-2)) | fibonacci` )) \
      || echo $n
  fi

elif [[ "$strat" == 'rec' ]]; then

  function fibonacci {
    (( $1 > 1 )) \
      && echo $(( `fibonacci $(($1-1))`+`fibonacci $(($1-2))` )) \
      || echo $1
  }
  fibonacci $1

elif [[ "$strat" == 'pipe' ]]; then

  function fibonacci {
    local n=`cat`
    (( n > 1 )) && echo $(( `fibonacci <<< $((n-1))`+`fibonacci <<< $((n-2))` )) || echo $n
  }
  echo "$1" | fibonacci

elif [[ "$strat" == 'tail_exec' ]]; then

  if [[ "$3" ]]; then
    (( $1 == 0 )) && echo $2 || exec fibonacci $(($1-1)) $3 $(($2+$3))
  else
    exec fibonacci $1 0 1
  fi

elif [[ "$strat" == 'tail_proc' ]]; then

  if [[ "$3" ]]; then
    (( $1 == 0 )) && echo $2 || fibonacci $(($1-1)) $3 $(($2+$3))
  else
    fibonacci $1 0 1
  fi

elif [[ "$strat" == 'trampoline' ]]; then

  function trampoline {
    until false; do
      [[ "$tram" ]] && local tram=`$tram` || local tram=$@
      echo $tram | grep -vq "^$1.*\$" && echo $tram && break ||:
    done
  }

  function fibonacci {
    (( $1 == 0 )) && echo $2 || echo fibonacci $(($1-1)) $3 $(($2+$3))
  }

  trampoline 'fibonacci' $1 0 1

elif [[ "$strat" == 'eval_rec' ]]; then

  fauxbonacci='(( #1 == 0 )) && echo #2 || eval `fauxbonacci $((#1-1)) #3 $((#2+#3))`'

  function fauxbonacci {
    local f="${fauxbonacci//'#1'/"$1"}"
    f="${f//'#2'/"$2"}"
    echo "${f//'#3'/"$3"}"
  }

  eval `fauxbonacci $1 0 1`

elif [[ "$strat" == 'tail_rec' ]]; then

  function fibonacci {
    (( $1 == 0 )) && echo $2 || fibonacci $(($1-1)) $3 $(($2+$3))
  }

  fibonacci $1 0 1

elif [[ "$strat" == 'loop' ]]; then

  let n=i=0 m=1; while (( i < $1 )); do let sum=n+m n=m m=sum ++i; done
  # for (( n=i=0, m=1; i < $1; sum=n+m, n=m, m=sum, ++i )); do :; done
  # [[ "$1" == 0 ]] && n=0 || for (( sum=$1, n=m=1; sum > 2; n+=m, m=n, --sum )); do :; done
  echo $n

elif [[ "$1" == 'all' ]]; then shift

  function print_fibonacci {
    local message="strat=$strat"
    parrot magenta "$message"
    time=`date +%s%3N`
    fibonacci $1
    echo "$((`date +%s%3N` - $time)) ms"
    echo
  }
  n=${1:-16}
  parrot bright,cyan "fibonacci $n"
  strat=loop print_fibonacci $n
  strat=tail_rec print_fibonacci $n
  strat=eval_rec print_fibonacci $n
  strat=trampoline print_fibonacci $n
  strat=tail_exec print_fibonacci $n
  strat=tail_proc print_fibonacci $n
  if [[ "$overflow" == true ]] || (( $n < 17 )); then
    strat=rec print_fibonacci $n
    strat=pipe print_fibonacci $n
    strat=proc_rec print_fibonacci $n
    strat=proc_pipe print_fibonacci $n
  else parrot yellow "skipping n=$n. set overflow=true for n>16."; fi

elif [[ ! "$strat" ]]; then strat=loop fibonacci $1
else echo "idk how to '$strat'"; exit 1; fi
